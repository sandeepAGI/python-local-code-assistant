{
  "input": {
    "mode": "Direct Prompt",
    "prompt": "Can you convert this code to C++?  Rewrite and share in C++",
    "code": "import os\nimport streamlit as st\nfrom langchain_ollama import ChatOllama\nfrom langchain.schema import HumanMessage, SystemMessage\nfrom datetime import datetime\nimport json\nfrom PIL import Image\nfrom io import BytesIO\nimport base64\n\n# ========== Setup Paths ==========\nBASE_DIR = os.path.expanduser(\"~/myworkspace/utilities/code-demo\")\nFILES_DIR = os.path.join(BASE_DIR, \"files\")\nos.makedirs(FILES_DIR, exist_ok=True)\n\n# ========== Initialize Model ==========\nllm = ChatOllama(model=\"codellama:7b-instruct\")\n\n# ========== Custom Styling ==========\nst.markdown(\"\"\"\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap');\n\n    html, body, [class*=\"css\"]  {\n        font-family: 'Montserrat', sans-serif;\n    }\n\n    h1, h2, h3, h4, h5 {\n        color: #2D2042;\n    }\n\n    .stButton > button {\n        background-color: #60B5E5 !important;\n        color: white !important;\n        font-weight: 600;\n        border-radius: 8px;\n    }\n\n    .stSidebar h1, .stSidebar h2, .stSidebar h3, .stSidebar h4, .stSidebar h5 {\n        color: #60B5E5 !important;\n    }\n\n    section[data-testid=\"stFileUploader\"] > div {\n        box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.05);\n        border-radius: 8px;\n        padding: 1rem;\n    }\n\n    #MainMenu {visibility: hidden;}\n    /* footer {visibility: hidden;} */\n    /* header {visibility: hidden;} */\n    </style>\n\"\"\", unsafe_allow_html=True)\n\n# ========== Helper Functions ==========\ndef read_code_file(file):\n    return file.read().decode(\"utf-8\")\n\ndef build_prompt(task, code=None, user_prompt=None):\n    if user_prompt:\n        return f\"{user_prompt}\\n\\n```python\\n{code}\\n```\" if code else user_prompt\n    elif task == \"Explain\":\n        return f\"Explain what this code does:\\n\\n```python\\n{code}\\n```\"\n    elif task == \"Refactor\":\n        return f\"\"\"Please refactor the following code to improve clarity, maintainability, and performance. Provide only the revised code with inline comments and no additional explanation:\n\n```python\n{code}\n```\"\"\"\"\"\n    elif task == \"Debug\":\n        return f\"Identify and fix bugs in the following code:\\n\\n```python\\n{code}\\n```\"\n    return \"\"\n\ndef save_output(input_data, result):\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    out_file = os.path.join(FILES_DIR, f\"output_{timestamp}.json\")\n    with open(out_file, \"w\") as f:\n        json.dump({\"input\": input_data, \"response\": result}, f, indent=2)\n\ndef get_base64_image(image_path):\n    with open(image_path, \"rb\") as f:\n        data = f.read()\n    return base64.b64encode(data).decode()\n\n# ========== Streamlit UI ==========\n# Logo and Title Header\nlogo_path = os.path.join(FILES_DIR, \"logo.jpg\")\nif os.path.exists(logo_path):\n    logo_base64 = get_base64_image(logo_path)\n    st.markdown(\n        f\"\"\"\n        <div style='display: flex; align-items: center; gap: 1rem; margin-bottom: 1.5rem;'>\n            <img src='data:image/png;base64,{logo_base64}' style='vertical-align: middle;' width='50'>\n            <h1 style='margin: 0; font-family: Montserrat, sans-serif; color: #2D2042;'>Local Code Assistant with Codellama:7b-instruct</h1>\n        </div>\n        \"\"\",\n        unsafe_allow_html=True\n    )\nelse:\n    st.title(\"Local Code Assistant with Codellama:7b-instruct\")\n\nst.sidebar.header(\"Interaction Mode\")\nmode = st.sidebar.radio(\"Choose a mode:\", [\"Structured\", \"Direct Prompt\"])\nsave_toggle = st.sidebar.checkbox(\"Save output to file\", value=False)\nst.sidebar.markdown(\"---\")\ndef_prompt = \"\"\"\nYou are a helpful and concise code assistant. Your goal is to analyze user-submitted code and respond based on the task type.\n\n- If explaining, be clear and beginner-friendly.\n- If refactoring, improve readability and performance with brief justifications. Output the improved code directly.\n- If debugging, explain the issues before showing the corrected version.\n\nRespond using markdown formatting when appropriate. Only output code inside triple backticks.\n\"\"\"\n# --- Styled System Prompt Section ---\nst.sidebar.markdown(\"\"\"\n    <div style='border: 1px solid #e6e6e6; padding: 12px; border-radius: 8px; background-color: #f9f9f9; margin-top: 10px; margin-bottom: 20px;'>\n        <strong style='color: #2D2042;'>System Prompt</strong><br>\n        <small style='color: #666;'>Customize how the model behaves. Use markdown-friendly formatting.</small>\n    </div>\n\"\"\", unsafe_allow_html=True)\n\ncustom_sys_prompt = st.sidebar.text_area(\"\", value=def_prompt, height=180)\n\n# --- Upload or paste code ---\nuploaded_file = st.file_uploader(\"Upload a code file:\", type=[\"py\", \"js\", \"java\"])\ncode_input = st.text_area(\"Or paste your code here:\")\n\ncode = \"\"\nif uploaded_file:\n    code = read_code_file(uploaded_file)\n    st.success(\"Code loaded from uploaded file.\")\nelif code_input.strip():\n    code = code_input\n\n# --- Prompt Execution ---\nif mode == \"Structured\":\n    task = st.radio(\"What do you want to do?\", [\"Explain\", \"Refactor\", \"Debug\"])\n    if st.button(\"Run Analysis\"):\n        if not code:\n            st.error(\"Please upload or enter some code.\")\n        else:\n            final_prompt = build_prompt(task, code)\n            response = llm.invoke([\n                SystemMessage(content=custom_sys_prompt),\n                HumanMessage(content=final_prompt)\n            ])\n            st.subheader(\"Model Response\")\n            st.code(response.content, language='markdown')\n            if save_toggle:\n                save_output({\"mode\": mode, \"task\": task, \"code\": code}, response.content)\n            \n\nelif mode == \"Direct Prompt\":\n    user_prompt = st.text_area(\"Enter your custom prompt:\")\n    if st.button(\"Run Prompt\"):\n        if not user_prompt.strip():\n            st.error(\"Please enter a prompt.\")\n        else:\n            final_prompt = build_prompt(None, code if code else None, user_prompt)\n            response = llm.invoke([HumanMessage(content=final_prompt)])\n            st.subheader(\"Model Response\")\n            st.code(response.content, language='markdown')\n            if save_toggle:\n                save_output({\"mode\": mode, \"prompt\": user_prompt, \"code\": code}, response.content)\n            \n\n# Footer Branding\nst.markdown(\"\"\"\n    <hr style='margin-top: 3rem;'>\n    <div style='text-align: center; color: #2D2042;'>Smarter Paths Forward</div>\n\"\"\", unsafe_allow_html=True)\n\n\n"
  },
  "response": "\nThe given Python code is a Streamlit application that allows users to interact with a pre-trained language model, specifically the \"Codellama:7b-instruct\" model, and get responses based on their input. Here's the C++ equivalent of this code:\n```c++\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <filesystem>\n\nusing namespace std;\n\n// Define some global variables\nconst string BASE_DIR = \"~/myworkspace/utilities/code-demo\";\nconst string FILES_DIR = BASE_DIR + \"/files\";\nconst string MODEL_NAME = \"codellama:7b-instruct\";\nvector<string> TASKS = {\"Explain\", \"Refactor\", \"Debug\"};\n\n// Define a struct to hold the input data for the model\nstruct InputData {\n    string code;\n    string task;\n    bool save_output;\n};\n\n// Define a function to read a file and return its contents as a string\nstring readFile(const string& path) {\n    ifstream file(path);\n    string content((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());\n    return content;\n}\n\n// Define a function to build the prompt for the model\nstring buildPrompt(const string& task, const string& code = \"\", const string& user_prompt = \"\") {\n    if (!user_prompt.empty()) {\n        return user_prompt + \"\\n\\n```python\\n\" + code + \"\\n```\";\n    } else if (task == \"Explain\") {\n        return \"Explain what this code does:\\n\\n```python\\n\" + code + \"\\n```\";\n    } else if (task == \"Refactor\") {\n        return \"Please refactor the following code to improve clarity, maintainability, and performance. Provide only the revised code with inline comments and no additional explanation:\\n\\n```python\\n\" + code + \"\\n```\";\n    } else if (task == \"Debug\") {\n        return \"Identify and fix bugs in the following code:\\n\\n```python\\n\" + code + \"\\n```\";\n    }\n    return \"\";\n}\n\n// Define a function to save output data to a file\nvoid saveOutput(const InputData& input_data, const string& result) {\n    time_t timestamp = time(nullptr);\n    string out_file = FILES_DIR + \"/output_\" + to_string(timestamp) + \".json\";\n    ofstream file(out_file);\n    json output = {{\"input\", input_data}, {\"response\", result}};\n    file << output.dump();\n}\n\n// Define a function to get the base64 encoding of an image\nstring getBase64Image(const string& image_path) {\n    ifstream file(image_path, ios::binary);\n    string data((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());\n    return base64_encode(data.c_str(), data.size());\n}\n\n// Define the Streamlit UI and its functionality\nvoid ui() {\n    // Logo and Title Header\n    string logo_path = FILES_DIR + \"/logo.jpg\";\n    if (exists(logo_path)) {\n        string logo_base64 = getBase64Image(logo_path);\n        cout << \"<div style='display: flex; align-items: center; gap: 1rem; margin-bottom: 1.5rem;'>\"\n                \"<img src='data:image/png;base64,\" + logo_base64 + \"' style='vertical-align: middle;' width='50'>\"\n                \"<h1 style='margin: 0; font-family: Montserrat, sans-serif; color: #2D2042;'>Local Code Assistant with Codellama:7b-instruct</h1>\"\n            \"</div>\" << endl;\n    } else {\n        cout << \"Local Code Assistant with Codellama:7b-instruct\" << endl;\n    }\n\n    // Custom Styling\n    cout << \"<style>@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap'); html, body, [class*='css'] { font-family: 'Montserrat', sans-serif; } h1, h2, h3, h4, h5 { color: #2D2042; } .stButton > button { background-color: #60B5E5 !important; color: white !important; font-weight: 600; border-radius: 8px; } .stSidebar h1, .stSidebar h2, .stSidebar h3, .stSidebar h4, .stSidebar h5 { color: #60B5E5 !important; } section[data-testid='stFileUploader'] > div { box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.05); border-radius: 8px; padding: 1rem; } #MainMenu {visibility: hidden;} /* footer {visibility: hidden;} */ /* header {visibility: hidden;} */ </style>\" << endl;\n\n    // Helper Functions\n    cout << \"// ========== Helper Functions ==========\" << endl;\n    cout << \"void readCodeFile(const string& file) {\" << endl;\n    cout << \"  ifstream file(file);\" << endl;\n    cout << \"  string content((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());\" << endl;\n    cout << \"  return content;\" << endl;\n    cout << \"}\" << endl;\n    cout << \"void buildPrompt(const string& task, const string& code = \\\"\\\", const string& user_prompt = \\\"\\\") {\" << endl;\n    cout << \"  if (user_prompt.empty()) {\" << endl;\n    cout << \"    if (task == \\\"Explain\\\") {\" << endl;\n    cout << \"      return \\\"Explain what this code does:\\\\n\\\\n```python\\\\n\\\" + code + \\\"\\\\n```\\\";\" << endl;\n    cout << \"    } else if (task == \\\"Refactor\\\") {\" << endl;\n    cout << \"      return \\\"Please refactor the following code to improve clarity, maintainability, and performance. Provide only the revised code with inline comments and no additional explanation:\\\\n\\\\n```python\\\\n\\\" + code + \\\"\\\\n```\\\";\" << endl;\n    cout << \"    } else if (task == \\\"Debug\\\") {\" << endl;\n    cout << \"      return \\\"Identify and fix bugs in the following code:\\\\n\\\\n```python\\\\n\\\" + code + \\\"\\\\n```\\\";\" << endl;\n    cout << \"    }\" << endl;\n    cout << \"  } else {\" << endl;\n    cout << \"    return user_prompt + \\\"\\\\n\\\\n```python\\\\n\\\" + code + \\\"\\\\n```\\\";\" << endl;\n    cout << \"  }\" << endl;\n    cout << \"}\" << endl;\n    cout << \"void saveOutput(const InputData& input_data, const string& result) {\" << endl;\n    cout << \"  time_t timestamp = time(nullptr);\" << endl;\n    cout << \"  string out_file = FILES_DIR + \\\"/output_\\\" + to_string(timestamp) + \\\".json\\\";\" << endl;\n    cout << \"  ofstream file(out_file);\" << endl;\n    cout << \"  json output = {{\\\"input\\\", input_data}, {\\\"response\\\", result}};\" << endl;\n    cout << \"  file << output.dump();\" << endl;\n    cout << \"}\" << endl;\n    cout << \"string getBase64Image(const string& image_path) {\" << endl;\n    cout << \"  ifstream file(image_path, ios::binary);\" << endl;\n    cout << \"  string data((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());\" << endl;\n    cout << \"  return base64_encode(data.c_str(), data.size());\" << endl;\n    cout << \"}\" << endl;\n\n    // Streamlit UI and its functionality\n    cout << \"// ========== Streamlit UI and its functionality ==========\" << endl;\n    cout << \"int main() {\" << endl;\n    cout << \"  cout << \\\"Logo and Title Header\\\" << endl;\" << endl;\n    cout << \"  // Logo and Title Header\" << endl;\n    cout << \"  string logo_path = FILES_DIR + \\\"/logo.jpg\\\";\" << endl;\n    cout << \"  if (exists(logo_path)) {\" << endl;\n    cout << \"    string logo_base64 = getBase64Image(logo_path);\" << endl;\n    cout << \"    cout << \\\"<div style='display: flex; align-items: center; gap: 1rem; margin-bottom: 1.5rem;'>\\\"\" << endl;\n    cout << \"            \\\"<img src='data:image/png;base64,\\\" + logo_base64 + \\\"' style='vertical-align: middle;' width='50'>\\\"\" << endl;\n    cout << \"            \\\"<h1 style='margin: 0; font-family: Montserrat, sans-serif; color: #2D2042;'>Local Code Assistant with Codellama:7b-instruct</h1>\\\"\" << endl;\n    cout << \"          \\\"</div>\\\" << endl;\" << endl;\n    cout << \"  } else {\" << endl;\n    cout << \"    cout << \\\"Local Code Assistant with Codellama:7b-instruct\\\" << endl;\" << endl;\n    cout << \"  }\" << endl;\n    cout << \"}\" << endl;\n\n    return 0;\n}\n```\nNote that this code is just a rough translation of the Python code and may not work as is. It's important to test and validate any C++ code before using it in your project."
}